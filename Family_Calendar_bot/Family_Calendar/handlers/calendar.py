from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, CallbackQuery, Message
from aiogram.filters import Command
from datetime import datetime, timedelta
from database import Database
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards import comfirm_notif

calendar_router = Router()
db = Database()


class WaitEvent(StatesGroup):
    waiting_event_name = State()
    waiting_event_description = State()
    waiting_event_time = State()


def create_calendar(year: int = None, month: int = None):
    if year is None or month is None:
        now = datetime.now()
        year = now.year
        month = now.month

    builder = InlineKeyboardBuilder()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardBuilder

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    builder.row(InlineKeyboardButton(
        text=f"{datetime(year, month, 1).strftime('%B %Y')}",
        callback_data="ignore"
    ))

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_of_week = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"]
    builder.row(*[InlineKeyboardButton(text=day, callback_data="ignore") for day in days_of_week])

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    events = db.get_events_by_month(year, month)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
    first_day = datetime(year, month, 1)
    last_day = datetime(year, month + 1, 1) - timedelta(days=1) if month < 12 else datetime(year + 1, 1, 1) - timedelta(days=1)
    days_in_month = [i for i in range(1, last_day.day + 1)]

    # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –¥–∞—Ç —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    event_dates = {event['date'] for event in events}

    # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    offset = first_day.weekday()  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - 0, ..., –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - 6
    days = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è
    for _ in range(offset):
        days.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    for day in days_in_month:
        date_str = f"{year}-{month:02d}-{day:02d}"
        emoji = "üìÖ" if date_str in event_dates else ""
        days.append(InlineKeyboardButton(
            text=f"{day} {emoji}",
            callback_data=f"day_{date_str}"
        ))

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–∞ –Ω–µ–¥–µ–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ä–∞–∑–º–µ—Ç–∫—É
    for i in range(0, len(days), 7):
        builder.row(*days[i:i + 7])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    builder.row(
        InlineKeyboardButton(text="<<", callback_data=f"prev_{prev_year}_{prev_month}"),
        InlineKeyboardButton(text=">>", callback_data=f"next_{next_year}_{next_month}")
    )

    return builder.as_markup()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ InlineKeyboardMarkup


@calendar_router.message(Command("calendar"))
async def start(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /calendar.
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=create_calendar())


@calendar_router.callback_query(F.data.startswith("day_"))
async def process_day(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    """
    selected_date = callback_query.data.split('_')[1]

    await state.update_data(selected_date=selected_date)
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await callback_query.answer()

    await state.set_state(WaitEvent.waiting_event_name)


@calendar_router.message(WaitEvent.waiting_event_name)
async def process_event_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
    """
    event_name = message.text
    await state.update_data(event_name=event_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(WaitEvent.waiting_event_description)


@calendar_router.message(WaitEvent.waiting_event_description)
async def process_event_description(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
    """
    event_description = message.text
    await state.update_data(event_description=event_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
    await state.set_state(WaitEvent.waiting_event_time)


@calendar_router.message(WaitEvent.waiting_event_time)
async def process_event_time(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É.
    """
    event_time = message.text
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(event_time, "%H:%M")
        await state.update_data(event_time=event_time)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        user_data = await state.get_data()
        db.save_event(
            user_id=message.from_user.id,
            date=user_data['selected_date'],
            name=user_data['event_name'],
            description=user_data['event_description'],
            time=event_time
        )

        await message.answer(f"–°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n"
                             f"–î–∞—Ç–∞: {user_data['selected_date']}\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data['event_name']}\n"
                             f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data['event_description']}\n"
                             f"–í—Ä–µ–º—è: {event_time}", reply_markup=comfirm_notif.notif_kb)
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú).")


@calendar_router.callback_query(F.data.startswith("prev_") | F.data.startswith("next_"))
async def process_navigation(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é.
    """
    action, year, month = callback_query.data.split('_')
    year = int(year)
    month = int(month)
    await callback_query.message.edit_reply_markup(reply_markup=create_calendar(year, month))
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ


@calendar_router.callback_query(F.data == "ignore")
async def process_ignore(callback_query: CallbackQuery):
    """
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫–ª–∏–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    """
    await callback_query.answer()
